SET SERVEROUTPUT ON;

CREATE OR REPLACE PACKAGE INITIALIZE_OPERATIONS
AS
    PROCEDURE CREATE_CONFIG_TABLE;
    PROCEDURE CREATE_TABLES;
    PROCEDURE CREATE_SEQUENCES;
    PROCEDURE POPULATE_INITIAL_DATA;
END INITIALIZE_OPERATIONS;
/


CREATE OR REPLACE PACKAGE BODY INITIALIZE_OPERATIONS
AS
PROCEDURE CREATE_CONFIG_TABLE AS
ROW_COUNT NUMBER(10);
BEGIN 
    SELECT count(*) into ROW_COUNT FROM user_tables where table_name = 'CONFIG_TABLE';
    IF(ROW_COUNT > 0)
    THEN
        DBMS_OUTPUT.PUT_LINE('TABLE CONFIG_TABLE ALREADY EXISTS');
    ELSE
        EXECUTE IMMEDIATE 'CREATE TABLE CONFIG_TABLE
    (
       TABLE_NAME varchar2(50), 
       TABLE_DEF varchar2(3000) NOT NULL, 
       CONSTRAINT CONFIG_TABLE_PK PRIMARY KEY(TABLE_NAME)
    )
    ';    
     DBMS_OUTPUT.PUT_LINE('TABLE CONFIG_TABLE CREATED SUCCESSFULLY');
    
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('LOCATION','CREATE TABLE LOCATION
            (	
            LOCATION_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
            CITY VARCHAR2(20) NOT NULL, 
            STATE VARCHAR2(20) NOT NULL,
            ZIPCODE NUMBER(10),
            CONSTRAINT LOCATION_PK PRIMARY KEY(LOCATION_ID)
            )
    ')]';
    
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('GROUPS','CREATE TABLE GROUPS
            (	
            GROUPS_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
            GROUPS_NAME VARCHAR2(20) NOT NULL, 
            GROUPS_DESCRIPTION VARCHAR2(20) NOT NULL,
            CONSTRAINT GROUPS_PK PRIMARY KEY(GROUPS_ID)
            )
    ')]';
    
      EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('ROLES','CREATE TABLE ROLES
            (	
            ROLES_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
            ROLES_DESCRIPTION VARCHAR2(20) NOT NULL,
            CONSTRAINT ROLES_PK PRIMARY KEY(ROLES_ID)
            )
    ')]';
    
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('TEST_CENTER','CREATE TABLE TEST_CENTER
            (
             TEST_CENTER_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             CENTER_NAME VARCHAR2(20) NOT NULL, 
             LOCATION_ID NUMBER(10) NOT NULL, 
	     CENTER_HEAD NUMBER(10) NOT NULL, 
             CONSTRAINT TEST_CENTER_PK PRIMARY KEY(TEST_CENTER_ID),
             CONSTRAINT TEST_CENTER_FK_LOCATION FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION(LOCATION_ID),
             CONSTRAINT TEST_CENTER_FK_USERS FOREIGN KEY (CENTER_HEAD) REFERENCES USERS(USER_ID) 
    )
    ')]';
	EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('SLOTS,'CREATE TABLE SLOTS
            (
             SLOT_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             SLOT_NAME VARCHAR2(20) NOT NULL, 
             SLOT_TIME DATE NOT NULL, 
	     SLOTS_AVAILABLE NUMBER(10) NOT NULL, 
             CONSTRAINT SLOTS_PK PRIMARY KEY(SLOT_ID)
    )
    ')]';
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('TEST_TYPE,'CREATE TABLE TEST_TYPE
            (
             TEST_TYPE_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             TEST_TYPE VARCHAR2(20) NOT NULL,
             CONSTRAINT TEST_TYPE_PK PRIMARY KEY(TEST_TYPE_ID)
    )
    ')]';
       EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('TEST_AVAILABILITY','CREATE TABLE TEST_AVAILABILITY
            (
             TEST_AVAILABILITY_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             TEST_CENTER_ID NUMBER(10) NOT NULL, 
             SLOT_ID NUMBER(10) NOT NULL, 
         TEST_TYPE_ID NUMBER(10) NOT NULL, 
             CONSTRAINT TEST_AVAILABILITY_PK PRIMARY KEY(TEST_AVAILABILITY_ID),
        CONSTRAINT TEST_AVAILABILITY_FK_ TEST_CENTER FOREIGN KEY (TEST_CENTER_ID) REFERENCES TEST_CENTER(TEST_CENTER_ID),
             CONSTRAINT TEST_AVAILABILITY_SLOTS FOREIGN KEY (SLOT_ID) REFERENCES SLOTS(SLOT_ID),
        CONSTRAINT TEST_AVAILABILITY_FK_TEST_TYPE FOREIGN KEY (TEST_TYPE_ID) REFERENCES SLOTS(TEST_TYPE_ID)
    )
        ')]';
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('STAFF_TIMESHEET','CREATE TABLE STAFF_TIMESHEET
            (
             STAFF_TIMESHEET_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             USER_ID NUMBER(10) NOT NULL, 
             TEST_CENTER_ID NUMBER(10) NOT NULL, 
         SLOT_ID NUMBER(10) NOT NULL, 
             CONSTRAINT STAFF_TIMESHEET_PK PRIMARY KEY(STAFF_TIMESHEET_ID),
    CONSTRAINT STAFF_TIMESHEET_FK_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT STAFF_TIMESHEET_FK_ TEST_CENTER FOREIGN KEY (TEST_CENTER_ID) REFERENCES TEST_CENTER(TEST_CENTER_ID),
        CONSTRAINT STAFF_TIMESHEET_FK_SLOTS FOREIGN KEY (SLOT_ID) REFERENCES SLOTS(SLOT_ID)
    )
    ')]';
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('QUARANTINE_FACILITY','CREATE TABLE QUARANTINE_FACILITY
            (
             QUARANTINE_FACILITY_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             QUARANTINE_FACILITY_NAME VARCHAR2(20) NOT NULL, 
             ROOMS_AVAILABILITY NUMBER(10) NOT NULL, 
            DOCTOR_ID NUMBER(10) NOT NULL, 
             CONSTRAINT QUARANTINE_FACILITY_PK PRIMARY KEY(QUARANTINE_FACILITY_ID),
    CONSTRAINT QUARANTINE_FACILITY_FK_DOCTOR_ID FOREIGN KEY (DOCTOR_ID) REFERENCES USERS(USER_ID)
    )
    ')]';
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('QUARANTINED_PATIENT_DETAILS','CREATE TABLE QUARANTINED_PATIENT_DETAILS
            (
             QUARANTINED_PATIENT_DETAILS_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            QUARANTINE_FACILITY_ID NUMBER(10) NOT NULL,  
             USER_ID NUMBER(20) NOT NULL, 
             JOIN_DATE DATE NOT NULL,
             CONSTRAINT QUARANTINED_PATIENT_DETAILS_PK PRIMARY KEY(QUARANTINED_PATIENT_DETAILS_ID),
            CONSTRAINT QUARANTINED_PATIENT_DETAILS_FK_FACILITY_ID FOREIGN KEY (QUARANTINE_FACILITY_ID) REFERENCES QUARANTINE_FACILITY(QUARANTINE_FACILITY_ID),
            CONSTRAINT QUARANTINED_PATIENT_DETAILS_FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
    )
    ')]';
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('TEST_SCHEDULE','CREATE TABLE TEST_SCHEDULE
            (
             TEST_SCHEDULE_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
             USER_ID NUMBER(10) NOT NULL,  
             TEST_DATE DATE NOT NULL, 
             TEST_SLOT_ID  NUMBER(10) NOT NULL,
            CENTER_ID NUMBER(10) NOT NULL,
            TEST_TYPE_ID NUMBER(10) NOT NULL,
            SCHEDULE_STATUS VARCHAR2(20) NOT NULL,
            TEST_RESULTS VARCHAR2(20),
             CONSTRAINT TEST_SCHEDULE_PK PRIMARY KEY(TEST_SCHEDULE_ID),
            CONSTRAINT TEST_SCHEDULE_FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
            CONSTRAINT TEST_SCHEDULE_FK_TEST_SLOT_ID FOREIGN KEY (TEST_SLOT_ID) REFERENCES SLOTS(SLOT_ID),
            CONSTRAINT TEST_SCHEDULE_FK_TEST_TYPE_ID FOREIGN KEY (TEST_TYPE_ID) REFERENCES TEST_TYPE(TEST_TYPE_ID)
    )
    ')]';
    
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('GROUPS_ROLES','CREATE TABLE GROUPS_ROLES
            (
             GROUPS_ROLES_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             GROUPS_ID NUMBER(10), 
             ROLES_ID NUMBER(10), 
             CONSTRAINT GROUPS_ROLES_PK PRIMARY KEY(GROUPS_ROLES_ID),
             CONSTRAINT GROUPS_ROLES_FK_GROUPS FOREIGN KEY (GROUPS_ID) REFERENCES GROUPS(GROUPS_ID),
             CONSTRAINT GROUPS_ROLES_FK_ROLES FOREIGN KEY (ROLES_ID) REFERENCES ROLES(ROLES_ID) 
    )
    ')]';
    
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('USERS','CREATE TABLE USERS
            (
              USER_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY
            , PHONE NUMBER(10)
            , PWD VARCHAR2(10) NOT NULL 
            , EMERGENCY_CONTACT VARCHAR2(10) NOT NULL 
            , LOCATION_ID NUMBER(10) NOT NULL 
            , RISK_STATUS INT 
            , LAST_NAME VARCHAR2(10) 
            , FIRST_NAME VARCHAR2(10) NOT NULL 
            , DOB DATE NOT NULL 
            , JOIN_DATE DATE DEFAULT SYSDATE
            , GROUPS_ID NUMBER(10) DEFAULT 1 
            , EMAIL VARCHAR2(10) NOT NULL 
            ,  CONSTRAINT USERS_PK PRIMARY KEY(USER_ID)
            ,  CONSTRAINT EMAIL_VALIDATION CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))
            ,  CONSTRAINT PHONE_VALIDATION CHECK(REGEXP_LIKE(PHONE, ''^[0-9]{10}$''))
            ,  CONSTRAINT USERS_FK_LOCATION FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION(LOCATION_ID)
            ,  CONSTRAINT USERS_FK_GROUPS FOREIGN KEY (GROUPS_ID) REFERENCES GROUPS(GROUPS_ID) 
            )
       ')]';
       
       EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('USER_LOGIN_AUDIT','CREATE TABLE USER_LOGIN_AUDIT
            (
             AUDIT_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY, 
             USER_ID NUMBER(10),
             LOGIN_STATUS VARCHAR2(10) NOT NULL,
             AUDIT_DATE DATE NOT NULL,
             CONSTRAINT USER_LOGIN_AUDIT_PK PRIMARY KEY(AUDIT_ID),
             CONSTRAINT USER_LOGIN_AUDIT_FK_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ,
             CONSTRAINT USER_LOGIN_AUDIT_LOGIN_STATUS CHECK (LOGIN_STATUS IN (''login'',''logout''))
        )
      ')]';
         
    END IF;
END CREATE_CONFIG_TABLE;

PROCEDURE CREATE_TABLES AS
  CURSOR config_table_cur
  IS
    SELECT 
        *
    FROM 
        config_table;
        
    tab_name varchar2(50);
    tab_def varchar2(3000);
    row_count number(10):= 0;
BEGIN
  FOR i IN config_table_cur
  LOOP
      tab_name:= i.table_name;
      tab_def:= i.table_def;
      
      DBMS_OUTPUT.PUT_LINE('tab_name -- '|| tab_name);
      DBMS_OUTPUT.PUT_LINE('--------------------------');

      SELECT count(*) into row_count FROM user_tables where table_name = tab_name;
       IF(row_count > 0)
        THEN
            DBMS_OUTPUT.PUT_LINE('TABLE '|| tab_name || ' ALREADY EXISTS');
        ELSE
            DBMS_OUTPUT.PUT_LINE('--------------------------');  
            EXECUTE IMMEDIATE tab_def;
            dbms_output.put_line( 'TABLE '|| tab_name || ' CREATED SUCCESSFULLY!' );
         END IF;
  END LOOP;
  dbms_output.put_line( 'ALL TABLES CREATED');
END CREATE_TABLES;

PROCEDURE CREATE_SEQUENCES AS
BEGIN
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  LOGIN_SEQ START WITH 100  INCREMENT BY 1' ;
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  SLOTS_SEQ  START WITH 100  INCREMENT BY 1' ;
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  TEST_AVAILABILITY_SEQ  START WITH 100  INCREMENT BY 1' ;
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  TEST_QPID_SEQ  START WITH 100  INCREMENT BY 1' ;
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  TEST_SCHEDULE_SEQ  START WITH 100  INCREMENT BY 1' ;
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  USER_SEQ  START WITH 100  INCREMENT BY 1';
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  LOCATION_SEQ  START WITH 100  INCREMENT BY 1';
     EXECUTE IMMEDIATE 'CREATE SEQUENCE  TEST_CENTER_SEQ  START WITH 100  INCREMENT BY 1' ;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line( 'FAILED TO CREATE_SEQUENCES MULTIPLE TIMES');
END CREATE_SEQUENCES;


-------------------POPULATE TABLES-----------------
PROCEDURE POPULATE_INITIAL_DATA AS
BEGIN
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (1,''BOSTON'',''MA'',02215)';
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (2,''NEW YORK'',''NY'',10001)';
    EXECUTE IMMEDIATE ' INSERT INTO LOCATION VALUES (3,''CAMBRIDGE'',''MA'',02114)';
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (4,''LOWELL'',''MA'',01850)';
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (6,''SAN JOSE'',''CA'',95119)';
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (7,''SAN FRANCISCO'',''CA'',94105)';
    EXECUTE IMMEDIATE 'INSERT INTO LOCATION VALUES (8,''LOS ANGELES'',''CA'',90001)';
    
    
    EXECUTE IMMEDIATE 'INSERT INTO TEST_TYPE VALUES (1, ''COVID - PCR'')';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_TYPE VALUES (2, ''COVID - RT PCR'')';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_TYPE VALUES (3, ''COVID - ANTIGEN'')';
    
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (2, ''MORNING'', TO_TIMESTAMP(''25-APR-21 09'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (3, ''MORNING'', TO_TIMESTAMP(''25-APR-21 10'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (4, ''MORNING'', TO_TIMESTAMP(''25-APR-21 11'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (5, ''MORNING'', TO_TIMESTAMP(''25-APR-21 12'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (6, ''MORNING'', TO_TIMESTAMP(''25-APR-21 14'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (7, ''MORNING'', TO_TIMESTAMP(''25-APR-21 15'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (8, ''MORNING'', TO_TIMESTAMP(''25-APR-21 16'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (9, ''MORNING'', TO_TIMESTAMP(''25-APR-21 17'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (10, ''MORNING'', TO_TIMESTAMP(''25-APR-21 18'', ''DD-MON-YY HH24''),10)';
    
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (11, ''MORNING'', TO_TIMESTAMP(''25-APR-21 09'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (12, ''MORNING'', TO_TIMESTAMP(''25-APR-21 09'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (13, ''MORNING'', TO_TIMESTAMP(''25-APR-21 10'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (14, ''MORNING'', TO_TIMESTAMP(''25-APR-21 11'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (15, ''MORNING'', TO_TIMESTAMP(''25-APR-21 12'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (16, ''MORNING'', TO_TIMESTAMP(''25-APR-21 14'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (17, ''MORNING'', TO_TIMESTAMP(''25-APR-21 15'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (18, ''MORNING'', TO_TIMESTAMP(''25-APR-21 16'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (19, ''MORNING'', TO_TIMESTAMP(''25-APR-21 17'', ''DD-MON-YY HH24''),10)';
    EXECUTE IMMEDIATE 'INSERT INTO SLOTS VALUES (20, ''MORNING'', TO_TIMESTAMP(''25-APR-21 18'', ''DD-MON-YY HH24''),10)';
    
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(1, 10, 1, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(2, 10, 2, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(3, 10, 3, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(4, 10, 4, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(5, 10, 5, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(6, 10, 6, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(7, 10, 7, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(8, 10, 8, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(9, 10, 9, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(10, 10, 10, 1)';
    
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(11, 10, 11, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(12, 10, 12, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(13, 10, 13, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(14, 10, 14, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(15, 10, 15, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(16, 10, 16, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(17, 10, 17, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(18, 10, 18, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(19, 10, 19, 1)';
    EXECUTE IMMEDIATE 'INSERT INTO TEST_AVAILIBILTY VALUES(20, 10, 20, 1)';
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line( 'TRIED TO INSERT INITIAL DATA MORE THAN ONCE');
END POPULATE_INITIAL_DATA;

END INITIALIZE_OPERATIONS;
/



CREATE OR REPLACE PACKAGE INSERTIONS
AS
    PROCEDURE ADD_LOCATION;
    PROCEDURE ADD_TEST_CENTER;
    PROCEDURE ADD_GROUPS;
    PROCEDURE ADD_ROLES;
    PROCEDURE ADD_GROUP_ROLES;
END INSERTIONS;



CREATE OR REPLACE PACKAGE BODY INSERTIONS
AS
    PROCEDURE ADD_LOCATION(L_CITY IN VARCHAR2, L_STATE IN VARCHAR2, L_ZIPCODE IN NUMBER)
    AS
    MERGE_STMT_SQL VARCHAR2(500);
    USING_STMT VARCHAR2(500);
    BEGIN  
        USING_STMT:= '(SELECT ' || chr(39) || L_CITY || chr(39) || ' AS CITY, '  
                        || chr(39) || L_STATE || chr(39) || ' AS STATE, '  
                        || chr(39) || L_ZIPCODE || chr(39) || ' AS ZIPCODE '
                        || ' FROM DUAL)';
        MERGE_STMT_SQL:= 'MERGE INTO LOCATION L USING ' || USING_STMT 
        || 'TEMP ON (L.CITY = TEMP.CITY ) WHEN NOT MATCHED THEN INSERT (CITY, STATE, ZIPCODE) VALUES (TEMP.CITY, TEMP.STATE, TEMP.ZIPCODE)';
        DBMS_OUTPUT.PUT_LINE(USING_STMT);
        DBMS_OUTPUT.PUT_LINE(MERGE_STMT_SQL);
        EXECUTE IMMEDIATE MERGE_STMT_SQL;
        COMMIT;
        
    END ADD_LOCATION;
    
    
    PROCEDURE ADD_TEST_CENTER(L_CENTER_NAME IN VARCHAR2, L_LOCATION_ID IN NUMBER, L_CENTER_HEAD IN NUMBER)
    AS
    MERGE_STMT_SQL VARCHAR2(500);
    USING_STMT VARCHAR2(500);
    BEGIN  
        USING_STMT:= '(SELECT ' || chr(39) || L_CENTER_NAME || chr(39) || ' AS CENTER_NAME, '
                        || L_LOCATION_ID || ' AS LOCATION_ID, '
                        || L_CENTER_HEAD || ' AS CENTER_HEAD '
                        || ' FROM DUAL)';
        DBMS_OUTPUT.PUT_LINE(USING_STMT); 
    
        MERGE_STMT_SQL:= 'MERGE INTO TEST_CENTER TC USING ' || USING_STMT || 'TEMP ON (TC.CENTER_NAME =  TEMP.CENTER_NAME 
                   AND TC.LOCATION_ID =  TEMP.LOCATION_ID AND TC.CENTER_HEAD =  TEMP.CENTER_HEAD)
                            WHEN NOT MATCHED THEN INSERT (CENTER_NAME, LOCATION_ID, CENTER_HEAD) 
                           VALUES (TEMP.CENTER_NAME, TEMP.LOCATION_ID, TEMP.CENTER_HEAD)';
        DBMS_OUTPUT.PUT_LINE(USING_STMT); 
        EXECUTE IMMEDIATE MERGE_STMT_SQL;
        COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
        
    END ADD_TEST_CENTER;
    
    
    PROCEDURE ADD_GROUPS(L_GROUPS_NAME IN VARCHAR2, L_GROUPS_DESCRIPTION IN VARCHAR2)
    AS
    MERGE_STMT_SQL VARCHAR2(500);
    USING_STMT VARCHAR2(500);
    BEGIN  
        USING_STMT:= '(SELECT ' 
                        || chr(39) || L_GROUPS_NAME || chr(39) || ' AS GROUPS_NAME, '
                        || chr(39) || L_GROUPS_DESCRIPTION || chr(39) || ' AS GROUPS_DESCRIPTION '
                        || ' FROM DUAL)';
    
        MERGE_STMT_SQL:= 'MERGE INTO GROUPS G USING ' || USING_STMT || 'TEMP ON (G.GROUPS_NAME =  TEMP.GROUPS_NAME 
                   AND G.GROUPS_DESCRIPTION =  TEMP.GROUPS_DESCRIPTION )
                    WHEN NOT MATCHED THEN INSERT (GROUPS_NAME,GROUPS_DESCRIPTION) 
                           VALUES (TEMP.GROUPS_NAME, TEMP.GROUPS_DESCRIPTION)';
        EXECUTE IMMEDIATE MERGE_STMT_SQL;
        COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
        
    END ADD_GROUPS;
    
    PROCEDURE ADD_ROLES(L_ROLES_DESCRIPTION IN VARCHAR2)
    AS
    MERGE_STMT_SQL VARCHAR2(500);
    USING_STMT VARCHAR2(500);
    BEGIN  
        USING_STMT:= '(SELECT ' 
                        || chr(39) || L_ROLES_DESCRIPTION || chr(39) || ' AS ROLES_DESCRIPTION '
                        || ' FROM DUAL)';
    
        MERGE_STMT_SQL:= 'MERGE INTO ROLES R USING ' || USING_STMT || 'TEMP ON (
                   R.ROLES_DESCRIPTION =  TEMP.ROLES_DESCRIPTION )
                    WHEN NOT MATCHED THEN INSERT (ROLES_DESCRIPTION) 
                           VALUES (TEMP.ROLES_DESCRIPTION)';
        EXECUTE IMMEDIATE MERGE_STMT_SQL;
        COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
        
    END ADD_ROLES;

    
    PROCEDURE ADD_GROUP_ROLES(L_GROUPS_ID IN NUMBER, L_ROLES_ID IN NUMBER)
    AS
    MERGE_STMT_SQL VARCHAR2(500);
    USING_STMT VARCHAR2(500);
    BEGIN  
        USING_STMT:= '(SELECT ' 
                        || L_GROUPS_ID || ' AS GROUPS_ID, '
                        || L_ROLES_ID || ' AS ROLES_ID '
                        || ' FROM DUAL)';
    
        MERGE_STMT_SQL:= 'MERGE INTO GROUP_ROLES( GR USING ' || USING_STMT || 'TEMP ON (GR.GROUPS_ID =  TEMP.GROUPS_ID 
                   AND GR.ROLES_ID =  TEMP.ROLES_ID )
                   WHEN NOT MATCHED THEN INSERT (GROUPS_ID, ROLES_ID) 
                           VALUES TEMP.GROUPS_ID, TEMP.ROLES_ID)'; 
        EXECUTE IMMEDIATE MERGE_STMT_SQL;
        COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
        
    END ADD_GROUP_ROLES;
        
END INSERTIONS;

----------------------------------------------------------VIEWS-------------------------------------------------
 CREATE OR REPLACE VIEW VIEW_QUARANTINE_FACILITY_DETAILS  AS
    SELECT
        qf_name,
        rooms_avail,
        city,
        state,
        zipcode
    FROM
             quarantine_facility qf
        INNER JOIN location l ON qf.location_id = l.location_id;

CREATE OR REPLACE VIEW VIEW_TEST_AVAILANILITY  AS
    SELECT
    tc.center_name,
    slot_name,
    slot_time,
    slots_available,
    tt.test_type
FROM
         test_center tc
    INNER JOIN test_availibilty  ta ON tc.center_id = ta.center_id
    INNER JOIN slots             s ON ta.slot_id = s.slot_id
    INNER JOIN test_type         tt ON ta.test_type_id = tt.test_type_id
WHERE
        s.slots_available > 0
    AND s.slot_time > sysdate
GROUP BY
    tc.center_name, 
    slot_time,
    slot_name,
    slots_available,
    tt.test_type
ORDER BY
    tc.center_name ASC;


 CREATE OR REPLACE FORCE EDITIONABLE VIEW TEST_CENTER_HEAD_VIEW 
  AS
    SELECT
        tc.center_name,
        pu.first_name || pu.last_name AS "Name",
        pu.user_id
    FROM
             test_center tc
        JOIN users          u ON tc.center_head = u.user_id
        JOIN users          pu ON tc.center_head != pu.user_id
        JOIN test_schedule  ts ON pu.user_id = ts.user_id
                                 AND ts.center_id = tc.center_id
        JOIN test_type      tp ON tp.test_type_id = ts.test_type_id
        JOIN slots          s ON ts.test_slot_id = s.slot_id
    WHERE
        tc.center_head = 1;


 CREATE OR REPLACE VIEW QUARANTINE_FACILITY_HEAD_VIEW
 AS 
            select 
            qf.qf_name, pu.first_name || pu.last_name AS "Name", pu.user_id, (sysdate - pu.join_date) AS "NO OF DAYS IN QUARANTINE"
            from quarantine_facility qf
            join quarantined_patient_details qp on qf.qf_id = qp.qf_id
            join users u on qf.doctor_id = u.user_id
            join users pu on qp.user_id = pu.user_id
            where  qf.doctor_id = 2;
            
   
 CREATE OR REPLACE VIEW TEST_STATISTICS
 AS          
 SELECT 
    TC.CENTER_NAME, L.CITY, COUNT(TS.TEST_SCHEDULE_ID) AS "NO. OF TESTS CONDUCTED",
    CASE WHEN (TS.TEST_RESULTS = 'POSITIVE') THEN COUNT(TS.TEST_SCHEDULE_ID) END  "POSITIVE CASES" 
 FROM
 TEST_SCHEDULE TS
 JOIN TEST_CENTER TC ON TS.CENTER_ID = TC.CENTER_ID
 JOIN LOCATION L ON TC.LOCATION_ID = L.LOCATION_ID
 GROUP BY TC.CENTER_NAME, L.CITY;



EXECUTE INITIALIZE_OPERATIONS.CREATE_CONFIG_TABLE;
EXECUTE INITIALIZE_OPERATIONS.CREATE_TABLES;
EXECUTE INITIALIZE_OPERATIONS.CREATE_SEQUENCES;
EXECUTE INITIALIZE_OPERATIONS.POPULATE_INITIAL_DATA;
